include(CMakeDependentOption)
cmake_dependent_option(FLATCC_TEST_COMPARE "Compare flatcc output" ON FLATCC_TEST OFF)

include(CMakeParseArguments)
function(flatcc_add_test)
    cmake_parse_arguments(FCT "NOREF" "NAME;TIMEOUT" "COMMAND" ${ARGN})

    if(FCT_UNPARSED_ARGUMENTS)
        message(FATAL_ERROR "Unknown arguments to flatcc_add_test: ${FCT_UNPARSED_ARGUMENTS}")
    endif()

    set(REFERENCE_STEM "${FLATCC_REFERENCE_DIR}/${FCT_NAME}")
    set(TEST_OUT_STEM "${FLATCC_OUTPUT_DIR}/${FCT_NAME}")
    set(REGEN_TGT_NAME "regenerate_reference_test_${FCT_NAME}")
    if(NOT FCT_TIMEOUT)
        set(FCT_TIMEOUT 2)
    endif()

    if(NOT FCT_NOREF)
        set_property(TARGET regenerate_reference_files APPEND
            PROPERTY FLATCC_REGEN_TARGETS "${REGEN_TGT_NAME}"
        )
    endif()
    if(FLATCC_TEST_COMPARE AND NOT FCT_NOREF AND FLATCC_TEE)
        add_test(NAME ${FCT_NAME} COMMAND ${FLATCC_TEE} "${TEST_OUT_STEM}" ${FCT_COMMAND})
        add_test(NAME diff_${FCT_NAME} COMMAND ${FLATCC_DIFF} "${REFERENCE_STEM}" "${TEST_OUT_STEM}" ${FLATCC_DIFF_IMP_BIN})
        set_tests_properties(diff_${FCT_NAME} PROPERTIES DEPENDS ${FCT_NAME} TIMEOUT 2)
    else()
        add_test(NAME ${FCT_NAME} COMMAND ${FCT_COMMAND})
    endif()
    set_tests_properties(${FCT_NAME} PROPERTIES TIMEOUT ${FCT_TIMEOUT})
    add_custom_target("${REGEN_TGT_NAME}"
        COMMAND ${FLATCC_TEE} "${REFERENCE_STEM}" ${FCT_COMMAND}
    )
endfunction()

define_property(TARGET PROPERTY FLATCC_REGEN_TARGETS
    BRIEF_DOCS "Names of targets regenerating flatcc reference files"
    FULL_DOCS "Names of targets regenerating flatcc reference files"
)

# FIXME: on Windows, also check for fc.exe (not fc according to @mikkelfj)
find_program(DIFF_BIN diff)
if(DIFF_BIN)
    set(FLATCC_DIFF_IMP_BIN "${DIFF_BIN}" -u)
endif()
if(NOT DIFF_BIN)
    set(FLATCC_DIFF_IMP_BIN "${CMAKE_COMMAND}" -E compare_files)
endif()

if(NOT FLATCC_TEE)
    find_package(UnixCommands)
    if(BASH)
        set(FLATCC_TEE "${BASH}" "${PROJECT_SOURCE_DIR}/scripts/tee.sh")
        set(FLATCC_DIFF "${BASH}" "${PROJECT_SOURCE_DIR}/scripts/diff.sh")
    endif()
endif()
if(NOT FLATCC_TEE)
    find_package(PythonInterp)
    if(PYTHONINTERP_FOUND)
        set(FLATCC_TEE "${PYTHON_EXECUTABLE}" "${PROJECT_SOURCE_DIR}/scripts/tee.py")
        set(FLATCC_DIFF "${PYTHON_EXECUTABLE}" "${PROJECT_SOURCE_DIR}/scripts/diff.py")
    endif()
endif()
if(NOT FLATCC_TEE)
    message(WARNING "Cannot compare with reference files")
endif()

set(FLATCC_REFERENCE_DIR "${PROJECT_SOURCE_DIR}/test/references")
set(FLATCC_OUTPUT_DIR "${PROJECT_BINARY_DIR}/test_outputs")

file(MAKE_DIRECTORY "${FLATCC_OUTPUT_DIR}")

if(FLATCC_TEE)
    add_custom_target(regenerate_reference_files
        COMMAND "${CMAKE_COMMAND}" -E rm -rf "${FLATCC_REFERENCE_DIR}"
        COMMAND "${CMAKE_COMMAND}" -E make_directory "${FLATCC_REFERENCE_DIR}"
        COMMAND "${CMAKE_COMMAND}" -E echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"  > "${FLATCC_REFERENCE_DIR}/00_AUTOGENERATED"
        COMMAND "${CMAKE_COMMAND}" -E echo "!! This directory + files are autogenerated !!" >> "${FLATCC_REFERENCE_DIR}/00_AUTOGENERATED"
        COMMAND "${CMAKE_COMMAND}" -E echo "!!        Do not modify or add files        !!" >> "${FLATCC_REFERENCE_DIR}/00_AUTOGENERATED"
        COMMAND "${CMAKE_COMMAND}" -E echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" >> "${FLATCC_REFERENCE_DIR}/00_AUTOGENERATED"
        COMMAND "${CMAKE_COMMAND}" --build "${CMAKE_BINARY_DIR}" --target $<TARGET_PROPERTY:regenerate_reference_files,FLATCC_REGEN_TARGETS> --verbose
        COMMAND_EXPAND_LISTS
    )
endif()
